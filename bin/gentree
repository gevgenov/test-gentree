#!/usr/bin/php
<?php declare (strict_types=1);

require __DIR__ . '/../vendor/autoload.php';

use Io\Readers\CsvFileReader;
use Io\Writers\JsonFileWriter;
use Io\Objects\Paths;
use Trees\Factories\NodeFactory;
use Trees\NodeService;
use Trees\TreeService;
use Trees\Factories\TreeFactory;
use Trees\Tree;

/**
 * @psalm-suppress MissingConstructor
 */
class Command {

    /** @var NodeService */
    private NodeService $nodeService;
    private TreeService $treeService;
    private TreeFactory $treeFactory;
    private bool $hasVerboseOption = false;
    private Paths $paths;

    public function execute(): void
    {
        $status = 0;
        try {
            $this->nodeService = new NodeService(new NodeFactory());
            $this->treeService = new TreeService();
            $this->treeFactory = new TreeFactory();
            $this->handle();
        } catch (Throwable $t) {
            if ($this->hasVerboseOption) {
                fwrite(STDERR, sprintf("%s:%s:%d: %s", $this->getProgramPath(), $t->getFile(), $t->getLine(), $t->getMessage()). PHP_EOL);
                fwrite(STDERR, $t->getTraceAsString(). PHP_EOL);
            } else {
                fwrite(STDERR, sprintf("%s: %s", $this->getProgramPath(), $t->getMessage()). PHP_EOL);
            }
            $this->usage();
            $status = 1;
        } finally {
            exit($status);
        }
    }

    public function handle(): void
    {
        $this->init();
        $tree = $this->read();
        $this->write($tree);
    }

    private function init(): self
    {
        $this->paths = new Paths($this->getInputPath(), $this->getOutputPath());
        $this->hasVerboseOption = (bool)getenv('VERBOSE');
        return $this;
    }

    private function read(): Tree
    {
        $csvReader = new CsvFileReader($this->paths->input);
        $nodeGenerator = $this->nodeService->createGeneratorFromRecordList($csvReader);
        return $this->treeFactory->createFromNodeList($nodeGenerator);
    }

    private function write(Tree $tree): self
    {
        $treeArray = $this->treeService->format($tree);
        (new JsonFileWriter(JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_THROW_ON_ERROR))($treeArray, $this->paths->output);
        return $this;
    }

    private function usage(): void
    {
        echo 'usage: <input-path> <output-path>' . PHP_EOL;
    }

    private function getInputPath(): string
    {
        $path = $this->getArgument(1);
        if (!is_file($path)) {
            throw new RuntimeException('Invalid input path!'); 
        }
        return $path;
    }

    private function getOutputPath(): string
    {
        $path = $this->getArgument(2);
        if (!is_dir(dirname($path))) {
            throw new RuntimeException('Invalid output path!'); 
        }
        return $path;
    }

    private function getProgramPath(): string
    {
        return $this->getArgument(0);
    }

    private function getArgument(int $index): string
    {
        if (!isset($_SERVER['argv'])) {
            throw new RuntimeException('Not in command line mode!'); 
        }
        $argument = $_SERVER['argv'][$index] ?? null;
        if ($argument === null) {
            throw new RuntimeException('Not enough arguments!'); 
        }
        return $argument;
    }
}

(new Command())->execute();
