#!/usr/bin/php
<?php declare (strict_types=1);

require __DIR__ . '/../vendor/autoload.php';

use Io\Readers\CsvFileReader;
use Io\Writers\JsonFileWriter;
use Io\Objects\Paths;
use Trees\Factories\NodeFactory;
use Trees\NodeService;
use Trees\TreeService;
use Trees\Factories\TreeFactory;
use Trees\Tree;

class Command {

    private Paths $paths;
    private NodeService $nodeService;
    private TreeService $treeService;
    private TreeFactory $treeFactory;
    private bool $hasVerbose = true;

    public function execute(): void
    {
        try {
            $this->nodeService = new NodeService(new NodeFactory());
            $this->treeService = new TreeService();
            $this->treeFactory = new TreeFactory();
            $this->handle();
            $status = 0;
        } catch (Throwable $t) {
            if ($this->hasVerbose) {
                fwrite(STDERR, sprintf("%s:%s:%d: %s", $_SERVER['argv'][0], $t->getFile(), $t->getLine(), $t->getMessage()). PHP_EOL);
                fwrite(STDERR, $t->getTraceAsString(). PHP_EOL);
            } else {
                fwrite(STDERR, sprintf("%s: %s", $_SERVER['argv'][0], $t->getMessage()). PHP_EOL);
            }
            $this->usage();
            $status = 1;
        } finally {
            exit($status);
        }
    }

    public function handle(): void
    {
        $this->init();
        $tree = $this->read();
        $this->write($tree);
    }

    private function init(): self
    {
        if ($_SERVER['argc'] !== 3) {
            throw new InvalidArgumentException('Invalid number of arguments!');
        }
        $this->hasVerbose = (bool)getenv('VERBOSE');
        $this->paths = new Paths($_SERVER['argv'][1], $_SERVER['argv'][2]);
        return $this;
    }

    private function read(): Tree
    {
        $csvReader = new CsvFileReader($this->paths->input);
        $nodeGenerator = $this->nodeService->createGeneratorFromRecords($csvReader);
        return $this->treeFactory->createFromNodes($nodeGenerator);
    }

    private function write(Tree $tree): self
    {
        $treeArray = $this->treeService->format($tree);
        (new JsonFileWriter(JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_THROW_ON_ERROR))($treeArray, $this->paths->output);
        return $this;
    }

    private function usage(): void
    {
        echo 'usage: <input-path> <output-path>' . PHP_EOL;
    }
}

(new Command())->execute();
